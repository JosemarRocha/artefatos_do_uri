ESTRADAS ESCURAS 1152
PROBLEMA: Byteland quer economizar, eles querem ligar só as luzes necessárias, onde sempre existirá algum caminho iluminado de qualquer junção de Byteland para qualquer outra junção.
Você recebe o número de junções, a quantidade de ruas, e em seguida 3 valores especificando qual será a estrada bidirecional entre x e y com z metros.

SOLUÇÃO:
São utilizados 2 vetores:
VETOR 1, com um struct da rota, que possui inicio, fim e tamanho/; 
VETOR ROTAS, onde serão armazenadas as rotas para fazer o menor caminho;

CONTADORES:
custo, que recebe o tamanho/gasto de todas as rotas ao adicioná-las no VETOR1; 
redução, que recebe o tamanho/custo de apenas as rotas selecionadas ao adicioná-las no VETOR ROTAS;

Recebo todos os valores das possíveis rotas e armazeno no VETOR 1. Dou um quicksort de acordo com o tamanho da rota em ordem crescente.
Em loop até n(quantidade de junções), verifico se o aquela posição do vetor rota já possui uma rota atribuída, se não, a rota de posição i é selecionada, e o contador de redução recebe quanto será gasto naquela rota. enfim, a posição correspondente ao inicio do caminho da rota recebe a rota utilizada, assim evitando que outras rotas sejam selecionada para aquele caminho.
Enfim um printf com o custo - redução = quanto será economizado com o novo sistema de iluminação.

--------------------//-------------------------

Eu Odeio SPAM, Mas Algumas Pessoas Amam - 1317
PROBLEMA:

--------------------//-------------------------

Caixa Dois - 2173
PROBLEMA: você deve calcular o maior valor que o político pode ter ganho asfaltando o menor numero de ruas. 
Você recebe o número de esquinas(N) e de ruas(M) respectivamente, nas proximas N você recebe a esquina X com a esquina Y e custo o C.

SOLUÇÃO:
Algoritmo de Kruskal bucando pelo mínimo de uniões entre os vértices e que retorne o custo;
1 Vetor (Rotas), que armazerna todos os inputs;
Sort e reverse para ordenar decrescente;
1 int quantia para calcular o gasto;

Recebe todos os valores e armazena no vetor rotas; 
Organiza o vetor por ordem crescente, usa Kruskal e pega o caminho mínimo com o mínimo de gastos;
int quantia descresce em seu valor o custo anterior;
Organiza o vetor por ordem decrescente, usa Kruskal e pega o caminho mínimo com o máximo de gastos;
int quantia adiciona em seu valor o custo anterior;
Enfim um printf com a quantia faturada pelo prefeito asfaltando o mínimo de ruas;

--------------------//-------------------------

Desenhando Labirintos - 1076
Problema: Queremos desenhar um labirinto sem tirar a caneta do papel, os labirintos podem ser de tamanho, por exemplo, 3x3, no máximo
7x7.
Você vai receber (T) casos de teste, (N) um ponto inicial, (V) número de vértices, (A) número de arestas.
O desenho começa a partir do ponto (N) e termina retornando a este ponto.

Solução: 
Criamos uma matriz que irá servir como o nosso papel em que será desenhado o grafo.
Criamos um vetor que dirá se um caminho entre dois pontos foi desenhado ou não.
Criamos uma váriavel contadora.

Criamos uma função utilizada em problemas envolvendo grafos chamada DFS ou Depth First Search,
ela serve principalmente para evitar que passemos por um nodo mais de uma vez e para a contabilização dos movimentos, isso ajuda bastante.

Recebemos o nosso número de casos de teste.
Recebemos o nosso ponto inicial.
Recebemos a quantidade de vértices e arestas e em seguida enchemos nossa matriz com (0) e o nosso vetor de caminhos com (false).
Em seguida começamos a dizer os caminhos a serem desenhados, para cada caminho atualizamos o nosso grafo, colocando (1) nos desenhados.

Por fim imprimos a quantidade de movimentos que foram feitos, contabilizados pela nossa função DFS que retorna a variável contadora,
que armazenou essa quantidade.

--------------------//-------------------------

Países em guerra - 1148
Problema: O mundo está em guerra e espiões tem de se comunicar via correios enviando cartas, mas nem todos os países trocam cartas,
para isso são feitos acordos entre eles.
As cartas são enviadas por agencias, caso uma carta seja enviada de uma agencia A para uma agencia B e elas estao no mesmo país, a carta
é enviada instantaneamente, caso contrario, leva um tempo até que a carta chegue ao local destino.

Solução: utilizando a noção de djikstra para fazermos um grafo onde os dados das agencias serão armazenados.
Criamos a estrutura do grafo, contendo vertices, arestas e uma matriz que armazena pontos e seus adjacentes.
Uma função baseada na de djikstra que será o "controle" do envio de cartas.

Recebo a quantidade de cidades e de acordos que serão feitos.
Faço com que para cada cidade o código atualize meu grafo para que tenhamos cidades nele, como os pontos do grafo.
Recebo então o acordo entre os países, compostos de, cidade de origem, cidade destino e tempo estimado para envio da carta entre os dois 
locais.
Verifico então se tais cidades que recebo nos acordos foram colocadas previamente no grafo, se sim atualizo e armazeno ali o tempo
estimado para o envio, se não, coloco 0 na posição, isso indica que aquela cidade informada no acordo não existe no meu grafo.
Então recebo a quantidade de consultas que irei fazer.
Digo a cidade de origem e a destino.
Então a função me retorna se a carta foi enviada, se sim, imprime o tempo em horas, se não, informo que a carta não pode ser enviada.

-------------------------------------------//-----------------------------------------

Policia e Ladrao - 1905

o problema é percorrer uma matriz de modo que a policia chegue ate o ladrao
foi utizado lista adjacente na implementacao do gafro utilizado
antes de iniciar os teste, foi criado um grado de 25 vertices correspondendo a cada um valor de uma matriz 5 x 5
cada vertice so pode se ligar a outro vertice que esteja a uma unidade de distancia na mesma coluna ou mesma linha,
assim por exemplo o vertice 5 pode se ligar ao vertive 4 (por estao na mesma linha i,em j-1), e ao vertice 10(mesma coluna j,
nesse caso em i +5 que seria na linha linha de baixo), mas nao podendo se ligar o vertice 6 por exemplo ja que este está em uma
linha e coluna diferente.
- 
- o grafo é iniciado em 0 ja que há casos em que a policia não pode passar nem sequer pelo vertice 1
nos casos de teste so precisamos saber por onde a policia não podera passar e assim iniciar a perseguição 
fazemos isso usando uma função de bloqueio do mesmo tamnho do grafo que recebe o valores dos lugares com 1 na matriz indicando o
lugar no grafo corresponde onde a busca não poderá passar
e assim podemos começar a percorrer o grafo usando busca em largura, além dela não visitar os vertices ja visitados
ela também não podera visitar os vetices que estão bloqueados, e assim com a distancia sendo calculada em um vetor para cada vertice,
no final se a distacia do ultimo vertice for desconhecida então a polica não conseguiu chegar até o ladrão,
caso a distacia seja conehcida, então o policia chegou até o ladrão.

------------------------------------//----------------------------------------

dudu faz serviço - 1610
dudu precisa saber se vai conseguir finalizar sua tarefa de trabalho com documentos que podem ter dependecias em um loop eterno
para fazer isso foi utiliza um grafo direcinado de lista adjacente que verifica se há um ciclo https://www.geeksforgeeks.org/archives/18212
o fucionamento geral do algoritmo com a busca em prfundidade é, usando juntamente com a variavel booleana que verifica se o um vertice
foi visitado, outra booleana para verificar se ocorreu ciclo, quando busca esta preste a passar por um vertice que ja foi visitado,
ela detecta que ocorreu um ciclo.
cada documento é uma aresta, nos teste  eca da os nuero de documentos, que é o tamnho do grafo e as depedencias existentes 
dado nos casos de teste uma sequencia de dependencias de documentos, de dois em dois, A se liga com B direcionadamente
e assim inicia se a busca de se há um ciclo no gafro, caso haja entao dudu nunca conseguirá terminar sua tarefa












